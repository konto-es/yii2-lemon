<?php


namespace kowi\lemon\resources;


class MoneyInWebInit extends Resource
{
    /** @var string  WHITE BRAND back URL, called by WEBKIT to terminate the operation. */
    public $returnUrl;
    /** @var string WHITE BRAND return URL, called by WEBKIT in case of an error. */
    public $errorUrl;
    /** @var string WHITE BRAND return URL, called by WEBKIT in case of a cancellation. */
    public $cancelUrl;
    /** @var boolean Save the card and returns an ID for future payments. Just like the RegisterCard method,
     * you will then be able to debit the card by calling MoneyInWithCardId.
     */
    public $registerCard;
    /** @var integer Indicate the number of days of the deferred payment. Between 0 and 6 days to have a guaranteed payment.
     * Only usable with isPreAuth = 1. Only available for Transactpro, Atos v2, Payzen, Monetico.
     */
    public $captureDelayedDays;
    /** @var string Indicate the name of the shop on the payment page. Only available for Payzen */
    public $label;
    /** @var integer Indicate the nature of activity for this moneyIn :
     *    0 = Activité 1.
     *    1 = Activité 2.
     */
    public $moneyInNature;
    /** @var string Unique ID of the call, generated by your WHITE BRAND server. This ID can be used as a search field when looking for operation details */
    public $reference;
    /** @var string Payment account ID to credit */
    public $accountId;
    /** @var integer Amount to debit. Amounts are given as integer numbers in cents */
    public $totalAmount;
    /** @var integer WHITE BRAND fee. Amounts are given as integer numbers in cents. */
    public $commissionAmount;
    /** @var string Comment regarding the transaction. */
    public $comment;
    /** @var boolean If true:
     * [amountCom] will be ignored and will be replaced with LEMON WAY's fee.
     * The WHITE BRAND will not receive any fee.
     */
    public $autoCommission;

    /** @var string Payment Token to pass to WEBKIT url using GET */
    public $webKitToken;
    /** @var integer Transaction ID */
    public $id;
    /** @var integer card ID */
    public $cardId;

    public function rules()
    {
        return array_merge(parent::rules(), [
            [['returnUrl', 'errorUrl', 'cancelUrl', 'reference', 'accountId'], 'required', 'on' => [static::SCENARIO_CREATE]],
            [['returnUrl', 'errorUrl', 'cancelUrl', 'label'], 'string', 'on' => [static::SCENARIO_CREATE]],
            [['reference'], 'string', 'max' => 50, 'on' => [static::SCENARIO_CREATE]],
            [['accountId'], 'string', 'max' => 256, 'on' => [static::SCENARIO_CREATE]],
            [['comment'], 'string', 'max' => 140, 'on' => [static::SCENARIO_CREATE]],
            [['captureDelayedDays', 'moneyInNature', 'totalAmount', 'commissionAmount'], 'integer', 'on' => [static::SCENARIO_CREATE]],
            ['moneyInNature', 'in', 'range' => [0, 1]],
            [['registerCard', 'autoCommission'], 'boolean', 'on' => [static::SCENARIO_CREATE]],

            [['webKitToken', 'id', 'cardId'], 'safe', 'on' => [static::SCENARIO_LOAD]],
        ]);
    }


    public static function resource()
    {
        return [
            //static::SCENARIO_LOAD => '/v2/accounts',
            static::SCENARIO_CREATE => '/v2/moneyins/card/webinit',
            //static::SCENARIO_UPDATE => '/v2/accounts/individual',
        ];
    }
}