<?php


namespace kowi\lemon\resources;


use kowi\lemon\objects\TransactionIn;
use Yii;
use yii\base\Exception;
use yii\base\InvalidConfigException;

class MoneyInWithCardId extends Resource
{
    /** @var boolean Indicates if the request is delayed and will require validation. */
    public $isPreAuth;
    /** @var integer Indicate the number of days of the deferred payment. Between 0 and 6 days to have a guaranteed payment.
     * Only usable with isPreAuth = 1. Only available for Transactpro, Atos v2, Payzen, Monetico.
     */
    public $delayedDays;
    /** @var string Leave empty */
    public $specialConfig;
    /** @var string Unique ID of the call, generated by your WHITE BRAND server. This ID can be used as a search field when looking for operation details */
    public $reference;
    /** @var string Payment account ID to credit */
    public $accountId;
    /** @var integer Amount to debit. Amounts are given as integer numbers in cents */
    public $totalAmount;
    /** @var integer WHITE BRAND fee. Amounts are given as integer numbers in cents. */
    public $commissionAmount;
    /** @var string Comment regarding the transaction. */
    public $comment;
    /** @var boolean If true:
     * [amountCom] will be ignored and will be replaced with LEMON WAY's fee.
     * The WHITE BRAND will not receive any fee.
     */
    public $autoCommission;
    /**
     * @var TransactionIn
     */
    public $transaction;

    /** @var integer */
    public $cardid;

    /** @var integer */
    public $id;

    public function rules()
    {
        return array_merge(parent::rules(), [
            [['reference', 'accountId'], 'required', 'on' => [static::SCENARIO_CREATE]],
            [['reference'], 'string', 'max' => 50, 'on' => [static::SCENARIO_CREATE]],
            [['accountId'], 'string', 'max' => 256, 'on' => [static::SCENARIO_CREATE]],
            [['comment'], 'string', 'max' => 140, 'on' => [static::SCENARIO_CREATE]],
            [['delayedDays', 'totalAmount', 'commissionAmount'], 'integer', 'on' => [static::SCENARIO_CREATE]],
            [['isPreAuth', 'autoCommission'], 'boolean', 'on' => [static::SCENARIO_CREATE]],
            [['specialConfig'], 'string', 'on' => [static::SCENARIO_CREATE]],
            [['transaction'], 'kowi\lemon\validators\ObjectValidator', 'targetClass' => 'kowi\lemon\objects\TransactionIn', 'on' => [static::SCENARIO_LOAD]],
        ]);
    }

    /**
     * @param bool $runValidation
     * @param null $attributes
     * @return bool
     * @throws InvalidConfigException
     * @throws Exception
     */
    public function insert($runValidation = true, $attributes = null)
    {
        $this->scenario = static::SCENARIO_CREATE;

        $url = static::replace(static::resource()[$this->scenario], ['cardid' => $this->cardid]);

        if ($runValidation && !$this->validate($attributes)) {
            Yii::info('Model not inserted due to validation error.', __METHOD__);
            Yii::info($this->getErrors(), __METHOD__);
            return false;
        }


        $attributes = $this->safeAttributes();
        $toArray = [];
        foreach ($attributes as $attribute) {
            if (isset($this->$attribute)) {
                $toArray[] = $attribute;
            }
        }
        $response = static::getLemonway()->createRequest()
            ->setMethod('POST')
            ->setUrl($url)
            ->setData($this->toArray($toArray))
            ->send();

        return $this->loadAttributes($response);
    }

    public static function resource()
    {
        return [
            //static::SCENARIO_LOAD => '/v2/accounts',
            static::SCENARIO_CREATE => '/v2/moneyins/card/{cardid}/rebill',
            //static::SCENARIO_UPDATE => '/v2/accounts/individual',
        ];
    }
}